import pyautogui as pag
import time
import sys
import subprocess

# # Get the ID and security principal of the current user account
#  $myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()
#  $myWindowsPrincipal=new-objec
# admin1!
# Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
# t System.Security.Principal.WindowsPrincipal($myWindowsID)
#   
#  # Get the security principal for the Administrator role
#  $adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator
#   
#  # Check to see if we are currently running "as Administrator"
#  if ($myWindowsPrincipal.IsInRole($adminRole))
#     {
#     # We are running "as Administrator" - so change the title and background color to indicate this
#     $Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + "(Elevated)"
#     $Host.UI.RawUI.BackgroundColor = "DarkBlue"
#     clear-host
#     }
#  else
#     {
#     # We are not running "as Administrator" - so relaunch as administrator
    
#     # Create a new process object that starts PowerShell
#     $newProcess = new-object System.Diagnostics.ProcessStartInfo "PowerShell";
    
#     # Specify the current script path and name as a parameter
#     $newProcess.Arguments = $myInvocation.MyCommand.Definition;
    
#     # Indicate that the process should be elevated
#     $newProcess.Verb = "runas";
    
#     # Start the new process
#     [System.Diagnostics.Process]::Start($newProcess);
    
#     # Exit from the current, unelevated, process
#     exit
#     }
#   
#  # Run your code that needs to be elevated here
#  Write-Host -NoNewLine "Press any key to continue..."
#  $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
# #***requires pip install opencv_python***#

# #****USEFUL POWERSHELL COMMANDS****#

# #*Change User Account Control Settings to Min* --> *Run Prog* --> *UAC Back To Default Level*#

# # |command to restart computer: Restart-Computer
# # |command to restart multiple computers: Restart-Computer -ComputerName SHELL-PC01, SHELL-PC02, localhost
# # |command to run powershell as admin: runas /netonly /user:RemoteDomain\Administrator powershell
# # |command to disable remote desktop: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 1
# # |command to disable remote desktop through firewall: Disable-NetFirewallRule -DisplayGroup "Remote Desktop"
# # |command to enable remote desktop: Set-ItemProperty -Path REGISTRY::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value 0
# # |command to enable remote desktop through firewall: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
# # |
# # |
# # |
# # |
# # |
# # |
# # |
# # |
# # |


queryList = []

def cmdAdmin():
    time.sleep(0.5)
    pag.hotkey("win","r")
    pag.write("cmd")
    pag.hotkey("ctrl","shift","enter")
    time.sleep(2)
    pag.write("admin1!")
    pag.press("enter")

    
def cmdAdminFromCMD():
    #runas /user:<localmachinename>\administrator cmd
    time.sleep(0.5)
    pag.hotkey("win","r")
    pag.press("enter")
    pag.hotkey("ctrl","shift","enter")
    time.sleep(2)
    pag.write("admin1!")
    pag.press("enter")

def searchFunc(arg):
    time.sleep(0.5)
    pag.press('win')
    time.sleep(1)
    pag.write(arg)
    time.sleep(0.5)

def launchFileExplorer():
    pag.hotkey("win","E")

def enableRemoteDesktopSettings():
    #Enable RDP : 1 = Disable ; 0 = Enable
    time.sleep(0.5)
    pag.write('Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0')
    pag.press("enter")
    pag.hotkey("ctrl","up")

def disableRemoteDesktopSettings():
    #Enable RDP : 1 = Disable ; 0 = Enable
    time.sleep(0.5)
    pag.write('Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 1')
    pag.press("enter")
    pag.hotkey("ctrl","up")

def enableUAC():
    time.sleep(0.5)
    pag.write("Set-ItemProperty -Path REGISTRY::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value 1")
    pag.press("enter")

def disableUAC():
    time.sleep(0.5)
    pag.write("Set-ItemProperty -Path REGISTRY::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value 0")
    pag.press("enter")
   
def setTimeDate():
    time.sleep(0.5)
    pag.write('tzutil /s "Central Standard Time"')
    time.sleep(1)
    pag.press("enter")

def gpUpdate():
    #Group Policy Update
    time.sleep(0.5)
    pag.write('gpupdate /force')
    pag.press("enter")
    time.sleep(0.5)
    pag.write("y")
    pag.press("enter")

# def disableUAC():
#     searchFunc("UAC")
#     pag.press("enter")
#     time.sleep(0.5)
#     uac = pag.locateOnScreen('C:\\Users\\Blake\\Desktop\\uac.png', grayscale=True,confidence=.5)
#     time.sleep(1)
#     print(uac)
#     pag.click()

# # def uacBypass():

# #     subprocess.call('powershell -command " New-Item -Path HKCU:\Software\Classes\ms-settings\shell\open\command -Value cmd.exe -Force"', shell=True) 
# #     subprocess.call('powershell -command "New-ItemProperty -Path HKCU:\Software\Classes\ms-settings\shell\open\command -Name DelegateExecute -PropertyType String -Force"', shell=True)
# #     subprocess.call('powershell -command "Cmd = fodhelper "', shell=True)
# #     subprocess.call('powershell -command "Set-ItemProperty -Path REGISTRY::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value 0 -Force"',shell=True)
# #     setRemoteDesktopSettings()
# #     # subprocess.call('powershell -command "Set-ItemProperty -Path REGISTRY::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value 0"', shell=True)
        
# # uacBypass2()


def uacBypass3():
#+ ['Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0']
    time.sleep(0.5)
    subprocess.Popen(["powershell.exe"] + ["runas /netonly /user:RemoteDomain\Administrator powershell"] )
    pag.press("enter")
    pag.write("admin1!")
    pag.press("enter")
    
    setTimeDate()
    disableUAC()
    enableRemoteDesktopSettings()

#uacBypass3()
cmdAdmin()


# #List of possible searches: OS, cmd, date and time settings, notifications and settings, check for updates
# #List of dicoverable terms: OS Version = qualification version, 
