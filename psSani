#**************Script must be run from an Administrator account in an Administrator Shell**************#

#Search Reg key 'hkcu' for all items like the word *tool; Get-ChildItem -Path hkcu:\ -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.Name -like "*tool*"}*#

$allGroups = Get-LocalGroup #Gets all groups 
$admins = Get-LocalGroupMember -Group 'Administrators' #Gets all members of the 'Administrators' Group
$currentDomainandUser = "$($env:UserDomain)\$($env:UserName)" #Gets current user Domain and Username


try{
    
     if($currentDomainandUser -in $admins.Name){
    
        Write-Host `n'***This user is a CONFIRMED member of the Administrators group in the appropriate Domain. Starting Program Now....***'`n
        
    }else{
    
        Throw #This 'Throw' allows a break from the if statement into the catch 'Throw' to exit the program.
       
    }

}catch{
    
        Throw "A fatal error has occurred. [ --Could NOT confirm that this user is a member of the Administrators group. Exiting program now...-- ] #0" 
         
}

Start-Sleep -s 6

try{

    #21
    $defrag = schtasks /Change /DISABLE /TN "\Microsoft\Windows\Defrag\ScheduledDefrag"
    $defrag

    Write-Host "The Following Action has Successfully Completed: ....Turned off Automated Defragmentation"
         
}catch{
    #When script is validated, change Write-Host commands to Throw commands
    Write-Host "A fatal error has occurred.[ --Was unable to Defrag-- #21 ]"
}

Start-Sleep -s 4

try{
    
    #22
    $stopSys = Stop-Service -Force -Name "SysMain" Set-Service -Name "SysMain" -StartupType Disabled
    $stopSys
    
    Write-Host "The Following Action has Successfully Completed: ....Disabled SuperFetch or SysMain service"
         
}catch{
    Write-Host "A fatal error has occurred.[ --SysMain Service Could Not Be Disabled-- #22 ]"
}   

Start-Sleep -s 4

try{
    
    #23

    Set-Service -Name "W32Time" -Status Running -StartupType Automatic

    tzutil /s "Central Standard Time"

    w32tm /query /status
    
    Write-Host "The Following Action has Successfully Completed: ....Verified that 'Windows Time' Service is turned on and is running."
         
}catch{
    Write-Host "A fatal error has occurred.[ --Could not verify that Windows Time is currently turned on or running.-- #23 ]"
}

Start-Sleep -s 4

 function GET-W32TMStatus($arg){

    $W32TMStat = ConvertFrom-StringData ($arg -join "`n" -replace ':', '=')
    if($W32TMStat.Source -eq "time.windows.com,0x9"-or $W32TMStat.Source -eq "time.windows.com,0x8"){
    
        return $true
    
    }else{
    
        return $false
    
    }

}
 
 try{

    #24

    if(GET-W32TMStatus(w32tm /query /status) -eq $true){
        
        Write-Host "W32TM Source Name Verified... Moving On... Verified that the Windows Time is syncing correctly."`n
    
    }else{
    
       throw
    }

}catch{

    Write-Host "This system is not synchronized with either source: MADDC01 or MADDC02"

}

Start-Sleep -s 4

function Sched-Cleanup($arg){

    #$tasks = ConvertFrom-StringData ($arg -join "`n" -replace ':', '=')
    foreach($name in $arg.TaskName){
        if($name -like "One*" -or $name -like "Adobe*"){

            #Unregister-ScheduledTask -TaskName $name -Confirm:$false        
            Write-Host "The Scheduled Task..." $name "has been unregistered."

        }
    
    }
 }

 try{

    #25
 
    Sched-Cleanup(Get-ScheduledTask)

    Write-Host "The Following Action has Successfully Completed: ....Removed Windows tasks that are not needed"

}catch{

    Write-Host "A fatal error has occurred.[ --Could not remove scheduled task.-- #25 ]"

}

Start-Sleep -s 4

try{

    #26

    Set-NetFirewallProfile -Enabled False

    Write-Host "The Following Action has Successfully Completed: ....Turned off Windows Firewall"

}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Disable Firewall #26-- ]"
}

Start-Sleep -s 4

try{
    #27
    $defaultBrowserKeyHTTPS = (Get-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\Shell\Associations\UrlAssociations\https\UserChoice' -Name ProgId).ProgId 
    $defaultBrowserKeyHTTP = (Get-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice' -Name ProgId).ProgId 

    if($defaultBrowserKeyHTTPS -ne "IE.HTTPS" -or $defaultBrowserKeyHTTP -ne "IE-HTTP"){

        Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\Shell\Associations\UrlAssociations\https\UserChoice' -Name ProgId -Value 'IE-HTTPS'

        Set-ItemProperty -Path 'HKCU:\SOFTWARE\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice' -Name ProgId -Value 'IE-HTTP'
}

}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Unable to Set Default Browser #27-- ]"

}


try{

    #28

    #Navigate to the domains folder in the registry
    Set-Location "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\Domains\" #Default Security
    #Set-Location "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap\EscDomains\" #For Enchanced Security
    New-Item ppdi.local
    Set-Location ppdi.local
    New-ItemProperty . -Name https -Value 2 -Type DWORD

    #Create a new folder with the website name

    Write-Host "The Following Action has Successfully Completed: ....Added https://*.ppdi.local to trusted sites"
    
    Write-Host "Trusted-Site added Successfully"
    Start-Sleep -s 2

}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Unable to Set Trusted Sites #28-- ]"

}

Start-Sleep -s 4

function Get-PnpErrors($arg){

    if($arg.Name -eq "Error"){
        return $false
    }else{
        return $true
    }

}

try{

#29 currently working on this....

    foreach($item in Get-PnpDevice){
    
        Get-PnpErrors($item) 

    }

    Write-Host "The Following Action has Successfully Completed: ....Verified that devices in Device Manager are functional"
}catch{

    Throw "An error has occured [ --Device was found with an error status-- ]"
}

Start-Sleep -s 4

try{
    #30
    <#Get-PnpDevice |
    Where-Object { $_.FriendlyName -match 'USB Enhanced Host Controller' } |
    Where-Object { $_.Status -ne 'OK' } |
    ForEach-Object {
        $_ | Disable-PnpDevice -Confirm:$false
        $_ | Enable-PnpDevice -Confirm:$false
    }

    #****_________________________

    #this is working below
    (Get-PnpDevice).Friendlyname -like "*host*"
    #>
    $adapters = Get-NetAdapter | Get-NetAdapterPowerManagement

    foreach ($adapter in $adapters){

        $adapter.AllowComputerToTurnOffDevice = 'Disabled'

        $adapter | Set-NetAdapterPowerManagement

} 
    Set-CimInstance -Query 'SELECT * FROM MSPower_DeviceEnable WHERE InstanceName LIKE "USB\\%"' -Namespace root/WMI -Property @{Enable = $false}

    Write-Host "The Following Action has Successfully Completed: ....Turned off power management of NICs and USB ports"


}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Unable to Disable Power Management-- ]"

}

Start-Sleep -s 4

try{

    #31
    POWERCFG /HIBERNATE OFF
    POWERCFG -duplicatescheme 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c

    Write-Host "The Following Action has Successfully Completed: ....Hibernate is turned off and computer is set to High Performance power settings"

}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Unable to either turn Hibernate mode off or high performance mode on-- ]"
    
}

Start-Sleep -s 4

try{

    #32

}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }

try{
    #33, Must be run in admin shell

    C:\Windows\System32\cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f

    Write-Host "The Following Action has Successfully Completed: ....Turned off User Account Control Settings"

}catch{

    Write-Host "Inadequate permissions to perform this action.[ --Unable to turn off UAC-- ]"
   
}

Start-Sleep -s 4

try{

    #34

}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }

try{

    #35

}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }

try{
    #36

    $pageFile = Get-WmiObject Win32_ComputerSystem -EnableAllPrivileges
    $pageFile.AutomaticManagedPagefile = $true #SET TO $FALSE TO DISABLE automatic swap file management
    $pageFile.put() | Out-Null

    Write-Host "The Following Action has Successfully Completed: ....Automatic Swap File Management has been Enabled"
    
}catch{

    Write-Host "Inadequate permissions to perform this action.[ --Unable to enable automatic swap file management-- ]" 
}

Start-Sleep -s 4

try{
    #37

    $disableIndex = Get-WmiObject -Class Win32_Volume -Filter "DriveLetter='C:'"
    $disableIndex.IndexingEnabled = $false
    $disableIndex.Put()

    Write-Host "The Following Action has Successfully Completed: '....Allow Indexing Service to index this disk for fast file searching' has been turned off for all hard drives."
    
}catch{

    Write-Host "Inadequate permissions to perform this action.[ --Disable automatic indexing of hard drive letter C:-- ]"
  
}

Start-Sleep -s 4

try{
    #38
    Write-Host "This step will be skipped in this script due to the rarity of its use."

}catch{Write-Host "A fatal error has occurred.[ Unknown Error ]" }

  function Unpin-App($appname) {

    ((New-Object -Com Shell.Application).NameSpace('shell:::{4234d49b-0245-4df3-b780-3893943456e1}').Items() |
        ?{$_.Name -eq $appname}).Verbs() | ?{$_.Name.replace('&','') -match 'Unpin from taskbar'} | %{$_.DoIt()}
}

try{

    #39
  

    Unpin-App("Google Chrome")
    #Unpin-App("Microsoft Store")


}catch{Write-Host "A fatal error has occurred.[ --Could not unpin items from taskbar.-- ]" }

try{

    #40

}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }

try{

    #41
    msfeedssync disable
    Write-Host "Msfeedssync.exe has been disabled."

}catch{Write-Host "A fatal error has occurred.[ Could not disable Msfeedssync.exe ]" }

try{

    #42

}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }

try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }

Stop







try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }
try{}catch{Write-Host "A fatal error has occurred.[ --.-- ]" }



<#

try{
    #10
    $Username = Read-Host -Prompt "Please enter your username."
    $Password = Read-Host -Prompt "Please enter your password." | ConvertTo-SecureString -AsPlainText -Force
    $CurrentPCName = Read-Host -Prompt "Please enter your computers CURRENT name."
    $NewPCName = Read-Host -Prompt "Please enter your computers NEW name."
    $Domain = Read-Host -Prompt "Please enter your required domain."
    $Creds = New-Object System.Management.Automation.PSCredential($Username ,$Password)


    Rename-Computer -NewName $NewPCName -ComputerName $CurrentPCName -Restart -DomainCredential $Creds
    
         
}catch{
    
    Throw "A fatal error has occurred.[ --Invalid Credentials or Computer Name/Domain.-- ]"
}

try{
    #11
    Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
    
         
}catch{

    Throw "Error... Command Failed."
}
#>
Write-host "TEST"

#if((Get-ScheduledTask -TaskName -like "o")){Write-Host Get-ScheduledTask -TaskName}
