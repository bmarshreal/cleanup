$allGroups = Get-LocalGroup #Gets all groups 
$admins = Get-LocalGroupMember -Group 'Administrators' #Gets all members of the 'Administrators' Group
$currentDomainandUser = "$($env:UserDomain)\$($env:UserName)" #Gets current user Domain and Username


try{
    
     if($currentDomainandUser -in $admins.Name){
    
        Write-Host 'This user is a CONFIRMED member of the Administrators group.'
    }else{
    
        Throw #This 'Throw' allows a break from the if statement into the catch 'Throw' to exit the program.
       
    }


}catch{
    
        Throw 'Could NOT confirm that this user is a member of the Administrators group. Exiting program now...' 
         
}



try{

    #21
    $defrag = schtasks /Change /DISABLE /TN "\Microsoft\Windows\Defrag\ScheduledDefrag"
    $defrag
    
         
}catch{
    #When script is validated, change Write-Host commands to Throw commands
    Write-Host "Error... Command Failed."
}

try{
    
    #22
    $stopSys = Stop-Service -Force -Name "SysMain" Set-Service -Name "SysMain" -StartupType Disabled
    $stopSys
    
         
}catch{
    Write-Host "Error... Command Failed."
}   

try{
    
    #23
    $W32TM = w32tm /query /status
    $W32TM
    
         
}catch{
    Write-Host "Error... Command Failed."
}


function GET-W32TMStatus($arg){

    $W32TMStat = ConvertFrom-StringData ($arg -join "`n" -replace ':', '=')
    if($W32TMStat.Source -eq "time.windows.com,0x9"){
    
        return $true
    
    }else{
    
        return $false
    
    }

}


try{
    #24
    if(GET-W32TMStatus(w32tm /query /status)){
        
        Write-Host "W32TM Source Name Verified... Moving On... `n"
    
    }elseif(GET-W32TMStatus(w32tm /query /status -eq $false)){
    
}
    
    
}catch{

    Write-Host "A fatal error has occurred.[ --Source name does not match.-- ]"
}

function Sched-Cleanup($arg){

    #$tasks = ConvertFrom-StringData ($arg -join "`n" -replace ':', '=')
    foreach($name in $arg.TaskName){
        if($name -like "One*" -or $name -like "Adobe*"){

            #Unregister-ScheduledTask -TaskName $name -Confirm:$false        
            Write-Host "The Scheduled Task..." $name "has been unregistered."

        }
    
    }
 }

 try{

    #25
 
    Sched-Cleanup(Get-ScheduledTask)

}catch{

    Write-Host "Could not remove scheduled task."

}

try{

    #26

    Set-NetFirewallProfile -Enabled False

}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Disable Firewall-- ]"

}

#>
try{

    #28

    #Setting IExplorer settings
    Write-Verbose "Now configuring IE"

    #Navigate to the domains folder in the registry
    set-location "HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings"
    set-location ZoneMap\Domains

    #Create a new folder with the website name
    new-item https://*.ppdi.local -Force #website part without https
    set-location https://*.ppdi.local
    new-itemproperty . -Name https -Value 2 -Type DWORD -Force

    Write-Host "Site added Successfully"
    Start-Sleep -s 2

}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Set Trusted Sites-- ]"

}

function Get-PnpErrors($arg){

    if($arg.Name -eq "Error"){
        return $false
    }else{
        return $true
    }

}

try{

#29 currently working on this....

    foreach($item in Get-PnpDevice){
    
        Get-PnpErrors($item) 

    }
}catch{

    Throw "An error has occured [ --Device was found with an error status-- ]"

}

try{
    #30
    Disable-NetAdapterPowerManagement
    Set-CimInstance -Query 'SELECT * FROM MSPower_DeviceEnable WHERE InstanceName LIKE "USB\\%"' -Namespace root/WMI -Property @{Enable = $false}

}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Unable to Disable Power Management-- ]"

}

try{

    #31
    POWERCFG /HIBERNATE OFF
    POWERCFG -duplicatescheme 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c

}catch{

    Write-Host "Inadequate permissions to perform this action. [ --Unable to either turn Hibernate mode off or high performance mode on-- ]"
    
}


try{
    #33, Must be run in admin shell

    C:\Windows\System32\cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f

}catch{

    Write-Host "Inadequate permissions to perform this action.[ --Unable to turn off UAC-- ]"
    
}

try{
    #36

    $pageFile = Get-WmiObject Win32_ComputerSystem -EnableAllPrivileges
    $pageFile.AutomaticManagedPagefile = $true #SET TO $FALSE TO DISABLE automatic swap file management
    $pageFile.put() | Out-Null
    
}catch{

    Write-Host "Inadequate permissions to perform this action.[ --Unable to enable automatic swap file management-- ]"
   
}

try{
    #37

    $disableIndex = Get-WmiObject -Class Win32_Volume -Filter "DriveLetter='C:'"
    $disableIndex.IndexingEnabled = $false
    $disableIndex.Put()
    
}catch{

    Write-Host "Inadequate permissions to perform this action.[ --Disable automatic indexing of hard drive letter C:-- ]"
  
}










try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}
try{}catch{Write-Host ""}



<#

try{
    #10
    $Username = Read-Host -Prompt "Please enter your username."
    $Password = Read-Host -Prompt "Please enter your password." | ConvertTo-SecureString -AsPlainText -Force
    $CurrentPCName = Read-Host -Prompt "Please enter your computers CURRENT name."
    $NewPCName = Read-Host -Prompt "Please enter your computers NEW name."
    $Domain = Read-Host -Prompt "Please enter your required domain."
    $Creds = New-Object System.Management.Automation.PSCredential($Username ,$Password)


    Rename-Computer -NewName $NewPCName -ComputerName $CurrentPCName -Restart -DomainCredential $Creds
    
         
}catch{
    
    Throw "A fatal error has occurred.[ --Invalid Credentials or Computer Name/Domain.-- ]"
}

try{
    #11
    Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -value 0
    
         
}catch{

    Throw "Error... Command Failed."
}
#>
Write-host "TEST"

#if((Get-ScheduledTask -TaskName -like "o")){Write-Host Get-ScheduledTask -TaskName}
